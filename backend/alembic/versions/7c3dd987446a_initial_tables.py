"""Initial tables

Revision ID: 7c3dd987446a
Revises:
Create Date: 2025-06-12 06:29:04.162971

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op
from app.models.custom_types.path_type import PathType

# revision identifiers, used by Alembic.
revision: str = "7c3dd987446a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "role", postgresql.ENUM("SUPERUSER", "ADMIN", "USER", "GUEST", name="userrole"), nullable=False
        ),
        sa.Column("profile_picture", PathType(), nullable=True),
        sa.Column("dir", PathType(), nullable=True),
        sa.Column("sso_id", sa.String(), nullable=True),
        sa.Column(
            "sso_provider",
            postgresql.ENUM(
                "GOOGLE",
                "MICROSOFT",
                "GITHUB",
                "FACEBOOK",
                "OKTA",
                "DISCORD",
                "APPLE",
                "CUSTOM",
                name="ssoprovider",
            ),
            nullable=True,
        ),
        sa.Column("sso_email_verified", sa.Boolean(), nullable=False),
        sa.Column("avatar_url", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "document",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("file_path", PathType(), nullable=True),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.Text(), nullable=True),
        sa.Column(
            "type",
            postgresql.ENUM(
                "RESUME",
                "COVER_LETTER",
                "SUPPORTING_DOCUMENT",
                "MASTER_LIST",
                "JOB_DESCRIPTION",
                "GENERAL",
                name="documenttype",
            ),
            nullable=False,
        ),
        sa.Column(
            "mime_type",
            postgresql.ENUM(
                "PDF",
                "DOCX",
                "DOC",
                "CSV",
                "XLSX",
                "XLS",
                "PPTX",
                "PPT",
                "ODT",
                "ODS",
                "ODP",
                "RTF",
                "XML",
                "YAML",
                "MARKDOWN",
                "TXT",
                "HTML",
                "JSON",
                "UNKNOWN",
                name="mimetype",
            ),
            nullable=True,
        ),
        sa.Column(
            "file_type",
            postgresql.ENUM(
                "PDF",
                "DOCX",
                "DOC",
                "CSV",
                "XLSX",
                "XLS",
                "PPTX",
                "PPT",
                "ODT",
                "ODS",
                "ODP",
                "RTF",
                "XML",
                "YAML",
                "MARKDOWN",
                "TXT",
                "HTML",
                "JSON",
                "UNKNOWN",
                name="filetype",
            ),
            nullable=True,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "UPLOADED",
                "PROCESSING",
                "PARSED",
                "VALIDATED",
                "ERROR",
                "ARCHIVED",
                "PENDING",
                name="documentstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "visibility",
            postgresql.ENUM("PUBLIC", "PRIVATE", "INTERNAL", "CONFIDENTIAL", name="documentvisibility"),
            nullable=False,
        ),
        sa.Column(
            "source",
            postgresql.ENUM(
                "USER_UPLOAD",
                "EMAIL",
                "EXTERNAL_API",
                "SCRAPED",
                "IMPORTED",
                "GENERATED",
                name="documentsource",
            ),
            nullable=False,
        ),
        sa.Column(
            "version",
            postgresql.ENUM("DRAFT", "FINAL", "REVISED", "ARCHIVED", "TEMPLATE", name="documentversion"),
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "job_application",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("company_name", sa.String(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("posting_url", sa.String(), nullable=True),
        sa.Column("applied_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column(
            "application_status",
            postgresql.ENUM(
                "APPLIED",
                "INTERVIEW_SCHEDULED",
                "OFFERED",
                "REJECTED",
                "ACCEPTED",
                "WITHDRAWN",
                "PENDING",
                name="jobapplicationstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "type",
            postgresql.ENUM(
                "FULL_TIME", "PART_TIME", "CONTRACT", "INTERNSHIP", "TEMPORARY", "FREELANCE", name="jobtype"
            ),
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_session",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("session_token", sa.String(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("ip_address", sa.String(), nullable=True),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("session_token"),
    )
    op.create_table(
        "assistant_step",
        sa.Column("job_application_id", sa.UUID(), nullable=False),
        sa.Column(
            "step_name",
            postgresql.ENUM(
                "INITIAL",
                "MASTER_LIST",
                "TAILORED_RESUME",
                "TAILORED_COVER_LETTER",
                "CANDIDATE_VALIDATION",
                "APPLICATION_TIPS",
                "HIRING_MANAGER_REVIEW",
                name="assistantsteptype",
            ),
            nullable=False,
        ),
        sa.Column(
            "step_status",
            postgresql.ENUM(
                "IN_PROGRESS", "COMPLETED", "FAILED", "CANCELLED", "NOT_STARTED", name="assistantstepstatus"
            ),
            nullable=False,
        ),
        sa.Column("step_order", sa.Integer(), nullable=True),
        sa.Column("previous_step_id", sa.UUID(), nullable=True),
        sa.Column("input_context", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("result", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["job_application_id"],
            ["job_application.id"],
        ),
        sa.ForeignKeyConstraint(
            ["previous_step_id"],
            ["assistant_step.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "document_job_application",
        sa.Column("document_id", sa.UUID(), nullable=False),
        sa.Column("job_application_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["document.id"],
        ),
        sa.ForeignKeyConstraint(
            ["job_application_id"],
            ["job_application.id"],
        ),
        sa.PrimaryKeyConstraint("document_id", "job_application_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("document_job_application")
    op.drop_table("assistant_step")
    op.drop_table("user_session")
    op.drop_table("job_application")
    op.drop_table("document")
    op.drop_table("user")
    # ### end Alembic commands ###
